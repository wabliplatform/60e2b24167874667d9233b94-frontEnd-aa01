/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Blog from '../model/Blog';

/**
* Blog service.
* @module api/BlogApi
* @version 1.0.0
*/
export default class BlogApi {

    /**
    * Constructs a new BlogApi. 
    * @alias module:api/BlogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createblog operation.
     * @callback module:api/BlogApi~createblogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Blog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Blog} blog data to be created
     * @param {module:api/BlogApi~createblogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Blog}
     */
    createblog(blog, callback) {
      let postBody = blog;
      // verify the required parameter 'blog' is set
      if (blog === undefined || blog === null) {
        throw new Error("Missing the required parameter 'blog' when calling createblog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Blog;
      return this.apiClient.callApi(
        '/blog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteblog operation.
     * @callback module:api/BlogApi~deleteblogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} blogId the Id parameter
     * @param {module:api/BlogApi~deleteblogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteblog(blogId, callback) {
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling deleteblog");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blog/{blogId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllblog operation.
     * @callback module:api/BlogApi~getAllblogCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Blog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/BlogApi~getAllblogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Blog>}
     */
    getAllblog(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Blog];
      return this.apiClient.callApi(
        '/blog/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getblog operation.
     * @callback module:api/BlogApi~getblogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Blog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} blogId the Id parameter
     * @param {module:api/BlogApi~getblogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Blog}
     */
    getblog(blogId, callback) {
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling getblog");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Blog;
      return this.apiClient.callApi(
        '/blog/{blogId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateblog operation.
     * @callback module:api/BlogApi~updateblogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Blog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} blogId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Blog} opts.blog data to be updated
     * @param {module:api/BlogApi~updateblogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Blog}
     */
    updateblog(blogId, opts, callback) {
      opts = opts || {};
      let postBody = opts['blog'];
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling updateblog");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Blog;
      return this.apiClient.callApi(
        '/blog/{blogId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
